-- Criação da base de dados completa
-- Código com os esquemas do banco
SET TIMEZONE = 'America/Sao_Paulo';

CREATE TABLE FUNCIONARIOS (
    CPF VARCHAR(11) PRIMARY KEY,
    TELEFONE VARCHAR(11) NOT NULL,
    CARGO VARCHAR(30) NOT NULL CHECK(UPPER(CARGO) IN ('ADMIN', 'PROF'));
    NOME VARCHAR(30) NOT NULL,
    DATA_NASC DATE,
    SEXO VARCHAR(20)
);

CREATE TABLE ADMINISTRADOR (
    CPF VARCHAR(11) PRIMARY KEY,
    CONSTRAINT FK_ADM FOREING KEY (CPF) REFERENCES FUNCIONARIO(CPF) ON DELETE CASCADE
);

CREATE TABLE PROFESSOR (
    FUNCIONARIO VARCHAR(11) PRIMARY KEY,
    CFEP VARCHAR(12) NOT NULL,
    QNTD_TURMAS INTEGER,
    CONSTRAINT FK_PROF FOREIGN KEY (CPF) REFERENCES FUNCIONARIO(CPF) ON DELETE CASCADE
);

CREATE TABLE IDIOMAS_PROF (
    PROFESSOR VARCHAR(11) NOT NULL,
    IDIOMA VARCHAR(20) NOT NULL,
    CONSTRAINT PK_IDIOMAS_PROF PRIMARY KEY (PROFESSOR, IDIOMA),
    CONSTRAINT FK_IDIOMAS_PROF FOREIGN KEY (PROFESSOR) REFERENCES PROFESSOR(FUNCIONARIO) ON DELETE CASCADE
);

CREATE TABLE PATROCINADOR (
    CNPJ VARCHAR(14) PRIMARY KEY,
    NOME_EMPRESA VARCHAR(50)
);

CREATE TABLE CONTATO (
    ADMINISTRADOR VARCHAR(11) NOT NULL,
    EMPRESA VARCHAR(14) NOT NULL,
    "DATA" DATE NOT NULL, -- Só salva a data do último contato com a empresa
    CONSTRAINT PK_CONTATO PRIMARY KEY (ADMINISTRADOR, EMPRESA),
    CONSTRAINT FK_ADM FOREIGN KEY (ADMINISTRADOR) REFERENCES ADMINISTRADOR(CPF) ON DELETE CASCADE,
    CONSTRAINT FK_EMP FOREIGN KEY (EMPRESA) REFERENCES PATROCINADOR(CNPJ) ON DELETE CASCADE
);

CREATE TABLE REPRESENTANTES (
    EMPRESA VARCHAR(14) NOT NULL,
    NOME VARCHAR(50) NOT NULL,
    TELEFONE VARCHAR(50) NOT NULL,
    CONSTRAINT PK_REP (EMPRESA, NOME, TELEFONE),
    CONSTRAINT FK_EMP FOREIGN KEY (EMPRESA) REFERENCES ADMINISTRADOR(CPF) ON DELETE CASCADE
);

CREATE TABLE ALDEIA (
    "LOCAL" VARCHAR(25) PRIMARY KEY, -- String com a geolocalização de uma aldeia, por exemplo (-22.013333, -47.888758)
    IDIOMA_OFICIAL VARCHAR(30) NOT NULL,
    NUM_MORADORES INTEGER,
    ETNIA VARCHAR(15)
);

CREATE TABLE INDIGENA (
    CPF VARCHAR(11) PRIMARY KEY,
    DATA_NASC DATE,
    RANI VARCHAR(15) NOT NULL,
    NOME VARCHAR(50),
    SEXO VARCHAR(20),
    ALDEIA VARCHAR(25) NOT NULL,
    CONSTRAINT FK_INDIGENA FOREIGN KEY (ALDEIA) REFERENCES ALDEIA("LOCAL") ON DELETE CASCADE
);

CREATE TABLE IDIOMAS_INDIGENA (
    INDIGENA VARCHAR(11) NOT NULL,
    IDIOMA VARCHAR(20) NOT NULL,
    CONSTRAINT PK_IDIOMAS_IND PRIMARY KEY (INDIGENA, IDIOMA),
    CONSTRAINT FK_IDIOMAS_IND FOREIGN KEY (INDIGENA) REFERENCES INDIGENA(CPF) ON DELETE CASCADE
);

CREATE TABLE PATROCINIO (
    NOTA_FISCAL VARCHAR(6) PRIMARY KEY
);

CREATE TABLE FORNECIMENTO (
    PATROCINIO VARCHAR(6) PRIMARY KEY,
    "DATA" DATE NOT NULL,
    PATROCINADOR VARCHAR(14) NOT NULL,
    TIPO VARCHAR(20) NOT NULL CHECK(UPPER(TIPO) IN ('PROJETO', 'CURSO')),
    CONSTRAINT UNIQUE_SK_FORNECIMENTO UNIQUE("DATA", PATROCINADOR),
    CONSTRAINT FK_PK_FORNECIMENTO FOREIGN KEY (PATROCINIO) REFERENCES PATROCINIO(NOTA_FISCAL) ON DELETE CASCADE,
    CONSTRAINT FK_PATROCINADOR_FORN FOREIGN KEY (PATROCINADOR) REFERENCES PATROCINADOR(CNPJ) ON DELETE CASCADE
);

CREATE TABLE MATERIAL (
    IMEI VARCHAR(15) PRIMARY KEY,
    TIPO VARCHAR(20)
);

CREATE TABLE MATERIAL_FORNECIMENTO (
    FORNECIMENTO VARCHAR(6) NOT NULL,
    MATERIAL VARCHAR(15) NOT NULL,
    QNTD INTEGER NOT NULL,
    CONSTRAINT PK_MATERIAL_FORNECIMENTO PRIMARY KEY(FORNECIMENTO, IMEI),
    CONSTRAINT FK_FORNECIMENTO_MF FOREIGN KEY (FORNECIMENTO) REFERENCES FORNECIMENTO(PATROCINIO) ON DELETE CASCADE,
    CONSTRAINT FK_MATERIAL_MF FOREIGN KEY (MATERIAL) REFERENCES MATERIAL(IMEI) ON DELETE CASCADE
);

CREATE TABLE CURSO (
    CODIGO VARCHAR(10) PRIMARY KEY,
    NOME VARCHAR(20),
    EMENTA VARCHAR(100)
);

CREATE TABLE PRE_REQUISITOS (
    CURSO_A VARCHAR(10) PRIMARY KEY,
    CURSO_B VARCHAR(10) UNIQUE,
    CONSTRAINT FK_CURSO_A FOREIGN KEY (CURSO_A) REFERENCES CURSO(CODIGO) ON DELETE CASCADE,
    CONSTRAINT FK_CURSO_B FOREIGN KEY (CURSO_B) REFERENCES CURSO(CODIGO) ON DELETE CASCADE
);

CREATE TABLE FORNECIMENTO_CURSO (
    FORNECIMENTO VARCHAR(6) NOT NULL,
    CURSO VARCHAR(10) NOT NULL,
    CONSTRAINT PK_FORNECIMENTO_CURSO PRIMARY KEY(FORNECIMENTO, CURSO),
    CONSTRAINT FK_FORNECIMENTO_CURSO FOREIGN KEY FORNECIMENTO REFERENCES FORNECIMENTO(PATROCINIO) ON DELETE CASCADE
);

CREATE TABLE PROJETO (
    TITULO VARCHAR(50) PRIMARY KEY,
    PROFESSOR VARCHAR(11) NOT NULL,
    ALUNO VARCHAR(11) NOT NULL,
    PUBLICO_ALVO VARCHAR(25),
    TEMA VARCHAR(20) NOT NULL,
    ESPECIFICACAO VARCHAR(100),
    CONSTRAINT SK_PROJETO UNIQUE(PROFESSOR, ALUNO),
    CONSTRAINT FK_ALUNO_PROJETO FOREIGN KEY (ALUNO) REFERENCES INDIGENA(CPF) ON DELETE CASCADE,
    CONSTRAINT FK_PROJ_PROJETO FOREIGN KEY (PROF) REFERENCES PROFESSOR(FUNCIONARIO) ON DELETE CASCADE
)

CREATE TABLE PALAVRAS_CHAVE (
    TITULO VARCHAR(50) NOT NULL,
    PALAVRA VARCHAR(50) NOT NULL,
    CONSTRAINT PK_PALAVRAS_CHAVE PRIMARY KEY(TITULO, PALAVRA),
    CONSTRAINT FK_PALAVRAS_CHAVE FOREIGN KEY (TITULO) REFERENCES PROJETO(TITULO) ON DELETE CASCADE
);

CREATE TABLE FORNECIMENTO_PROJETO (
    FORNECIMENTO VARCHAR(6) NOT NULL,
    PROJETO VARCHAR(50) NOT NULL,
    CONSTRAINT PK_FORNECIMENTO_PROJETO PRIMARY KEY(FORNECIMENTO, PROJETO),
    CONSTRAINT FK_FORNECIMENTO_PROJETO FOREIGN KEY FORNECIMENTO REFERENCES PROJETO(TITULO) ON DELETE CASCADE
);

-- Função usada para checar se o trimestre adicionado não está no futuro da data atual, ou seja, quando o ano inserido é o mesmo do ano atual fazemos uma checagem pelo trimestre. Quando o ano é menor que o atual só retornamos o trimestre já inserido
CREATE OR REPLACE FUNCTION GET_CURRENT_TRIMESTER(ANO INTEGER, TRIMESTRE VARCHAR) RETURNS VARCHAR AS $$
DECLARE
    MES_ATUAL INTEGER;
    ANO_ATUAL INTEGER;
    TRIMESTRE_ATUAL VARCHAR;
BEGIN
    MES_ATUAL := EXTRACT(MONTH FROM CURRENT_DATE)
    ANO_ATUAL := EXTRACT(YEAR FROM CURRENT_DATE)

    IF ANO == ANO_ATUAL THEN
        CASE
            WHEN MES_ATUAL IN (1, 2, 3) THEN TRIMESTRE_ATUAL := '1o';
            WHEN MES_ATUAL IN (4, 5, 6) THEN TRIMESTRE_ATUAL := '2o';
            WHEN MES_ATUAL IN (7, 8, 9) THEN TRIMESTRE_ATUAL := '3o';
            WHEN MES_ATUAL IN (10, 11, 12) THEN TRIMESTRE_ATUAL := '4o';
        END CASE;
    ELSE
        TRIMESTRE_ATUAL := TRIMESTRE;
    END IF;

    RETURN TRIMESTRE_ATUAL;
END;

CREATE TABLE TURMA (
    ID SERIAL, -- Usando serial para automaticamente gerar um id sintético
    CURSO VARCHAR(10) NOT NULL,
    ALDEIA VARCHAR(25) NOT NULL,
    ANO INTEGER NOT NULL CHECK(ANO <= EXTRACT(YEAR FROM CURRENT_DATE)); -- Ano mas salvo como string
    TRIMESTRE VARCHAR(2) NOT NULL CHECK(TRIMESTRE = GET_CURRENT_TRIMESTER(ANO, TRIMESTRE)) AND CHECK (TRIMESTRE IN ('1o', '2o', '3o', '4o')); -- Usando o segundo check para casos onde o ano inserido não é o mesmo do atual, sendo assim é necessário fazer uma comparação para saber se o trimestre inserido está dentro dos valores válidos.
    HORARIO VARCHAR()
    PROFESSOR VARCHAR(11) NOT NULL,
    CONSTRAINT SK_TURMA UNIQUE(CURSO, ALDEIA, ANO, TRIMESTRE),
    CONSTRAINT FK_CURSO_TURMA FOREIGN KEY (CURSO) REFERENCES CURSO(CODIGO) ON DELETE CASCADE,
    CONSTRAINT FK_CURSO_ALDEIA FOREIGN KEY (ALDEIA) REFERENCES ALDEIA("LOCAL") ON DELETE CASCADE,
    CONSTRAINT FK_CURSO_PROF FOREIGN KEY (PROFESSOR) REFERENCES PROFESSOR(FUNCIONARIO) ON DELETE CASCADE
);

CREATE TABLE ALUNO_TURMA (
    ALUNO VARCHAR(11) NOT NULL, 
    TURMA SERIAL NOT NULL,
    APROVADO BOOLEAN,
    CONSTRAINT PK_ALUNO_TURMA PRIMARY KEY(ALUNO, TURMA),
    CONSTRAINT FK_ALUNO_AT FOREIGN KEY(ALUNO) REFERENCES INDIGENA(CPF) ON DELETE CASCADE,
    CONSTRAINT FK_TURMA_AT FOREIGN KEY(TURMA) REFERENCES TURMA(ID) ON DELETE CASCADE
);
